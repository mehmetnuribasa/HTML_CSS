/* CSS: Cascading Style Sheet */

/* use for id : "#" */
/* use for class: "." */

body {
    color: black;
    background-color: white;

    background-image: url(photo/background3.jpg);
    background-repeat: no-repeat;
    background-position: center;
    background-attachment: fixed;
    background-size: cover;
}

.div0 h1 {
    color: blueviolet;

    /* horizontal, vertical, blur, color */
    text-shadow: 4px 4px 3px hsl(158, 58%, 52%), -4px -4px 3px hsl(321, 58%, 55%);
}

.exampleDiv {
    border: 3px dashed blueviolet; /* edge */
    border-radius: 5px;
    
    /* we can also use this way */
    /*
    border-style: dotted;
    border-color: blueviolet;
    border-width: 3px;
    */

    color: black;
    background-color: hsl(312, 49%, 47%);

    /* location (space around an element)*/
    margin-top: 50px;
    margin-left: 25px;
    margin-right: 150px;
    margin-bottom: auto;

    /* inner distance from edge */
    padding: 10px;
    padding-left: 25px;
    padding-bottom: 25px;

    /* box shadowing */
    /* horizontal, vertical, blur */
    box-shadow: 5px 5px 10px;
}


/* FLOAT */
/* float = allows other elements to flow around it */
#img1 {
    float: left;
    height: 100px;
    margin-right: 10px;
}

#img2 {
    float: right;
    height: 150px;
    margin-left: 10px;
}

/* flow-root: provides that the internal elements remain inside the box */
.div2 {
    border: 3px solid;
    display: flow-root;

    margin-bottom: 20px;
}


/* OVERFLOW */
/* overflow: visible, hidden, clip, scroll, auto */
.box3 {
    border: 2px solid;
    height: 75px;
    overflow: clip;
    overflow-clip-margin: 30px;

    margin-bottom: 50px;
}

.box4 {
    border: 2px solid;
    height: 75px;
    overflow: scroll;   /* if the content is overflow, "auto" states "scroll" */

    margin-bottom: 20px;
}



/* DISPLAY */
/* block-level: start on a new line, take up to full width available
            (h1, div, p, form, header, footer)

    inline: do not start on a new line, width is lim≈üited to what is needed
            (span, a, img)
*/

/* display: block, inline-block, inline, none */
/* div */
.box5 {
    background-color: rgb(191, 89, 89);
    width: 100px;
    height: 100px;
    display: inline;    /* default of div is "block" */    
}

/* span */
.box6 {
    background-color: rgb(157, 157, 227);
    width: 100px;
    height: 100px;
    display: inline-block;    /* default of span is "inline" */
    visibility: hidden;
}



/* WIDTH-HEIGHT */
.container1 {
    background-color: hsl(0, 0%, 37%);
    height: 100vh;      /* viewport high */

}

.box7 {
    /* box has border with other boxes */
    box-sizing: border-box;

    border: 2px solid;
    padding: 15px;
    height: auto;
    width: 50%;
    float: left;
    text-align: center;

    min-height: 75%;
    background-color: hsl(0, 0%, 100%);
}


/* POSITION */
/* 
    relative: positioned relative to where it normally
    fixed: positioned relative to the viewport
    absolute: positioned relative to nearest ancestor
    sticky: positioned based on scroll position
    static: default position for an element
*/
#box8 {
    width: 100px;
    height: 100px;
    background-color: hsl(158, 52%, 49%);
    
    position: relative;
    top: 50px;
    left: 50px;


    /* Appear on all elements, even if the scroll is scrolled  */
    /* position: fixed;
    bottom: 0;
    left: 50px; */

    /* Mixture of the relative position and fixed position */
    /* position: sticky;
    top: 0;
    left: 50px; */
}

#box9 {
    width: 50px;
    height: 50px;
    background-color: hsl(1, 52%, 49%);
    
    position: absolute;
    top: 10px;
    left: 25px;

    /* default position for an element */
    /* position: static; */
}



/* COMBINATORS */
/* explains the relationship between listed selectors
    
      = descendant
    > = child
    ~ = general siblings
    + = adjacent sibling

*/
#container2 {
    border: 2px solid;
}

#container2 > p {
    background-color: hsl(60, 84%, 73%);
}

#container2 + p {
    background-color: hsl(0, 84%, 73%);
}



/* PSEUDO-CLASSES */
.container3 p {
    background-color: hsl(158, 52%, 49%);
    padding: 10px;
    display: none;
}

.container3:hover p{
    display: inline;
}


.container3 a:link {
    color: rgb(0, 132, 155);
    font-size: 1.5em;
}

.container3 a:hover {
    color: rgb(63, 155, 171);
    font-size: 1.6em;
}

.container3 a:active {
    color: rgb(2, 79, 93);
    font-size: 1.6em;
}

.container3 a:visited {
    color: rgb(183, 180, 102);
}

.container3 li:hover {
    background-color: hsl(0, 71%, 66%);
}

.container3 li:not(:hover) {
    background-color: hsla(60, 72%, 79%, 0.82);
}

.container3 li:nth-child(3n+1) {
    background-color: hsla(0, 84%, 60%, 0.79);
}

/* .container3 li:nth-child(even) {
    background-color: hsla(0, 84%, 60%, 0.79);
} */



/* PSEUDO-ELEMENT */
.container4 h1::first-letter {
    font-size: 2em;
    font-style: italic;
}

.container4 p::first-line {
    background-color: hsl(158, 52%, 49%);
}

.container4 p::selection {
    color: black;
    background-color: aqua;
}

/* .container4 li::before {
    content: "‚úì";
    color: hsl(158, 52%, 49%);
} */

.container4 #apple::after {
    content: "üçé";
}

.container4 #orange::after {
    content: "üçä";
}

.container4 #banana::after {
    content: "üçå";
}

.container4 li::marker {
    content: "‚úì";
    color: hsl(158, 52%, 49%);
    font-size: 1.3em;
}



/* DROPDOWN MENU */
.dropdown {
    /* dropwdown menu opens only when the cursor is on the button */
    display: inline-block;
}

.dropdown button {
    border: none;
    background-color: hsl(0, 0%, 80%);
    color: white;
    padding: 10px 15px;
    cursor: pointer;    /* arrange the cursor view */
}

.dropdown a {
    display: block;
    color: black;
    text-decoration: none;  /* arrange the view of the text exp. underline or none */
    padding: 10px 15px;
}

.dropdown .content {
    /* we can also use visibility (as "hidden"), but we really want it not to be here right now. So we should use "display" */
    display: none;
    position: absolute;
    background-color: hsl(0, 0%, 90%);
    min-width: 100px;
    box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.613);
}

.dropdown:hover .content {
    display: block;
}

.dropdown:hover button {
    background-color: hsl(0, 0%, 75%);
}

.dropdown a:hover {
    background-color: hsl(0, 0%, 85%);
}



/* NAVIGATION BAR */
.navigation-bar h1 {
    text-align: center;
}

.navigation-bar .navbar ul {
    list-style-type: none;  /* style type of the list */
    background-color: hsl(0, 0%, 45%);
    padding: 0;
    margin: 0;

    /* in this example, if we will use float (as "left"), overflow must be "hidden"  */
    overflow: hidden;
}

.navigation-bar .navbar a {
    color: white;
    text-decoration: none;
    padding: 15px;
    text-align: center;
    display: block;
    /* display: inline-block; */
}

.navigation-bar .navbar a:hover {
    background-color: hsl(0, 0%, 30%);
}

/* we can also use this way instead of using float */
/* .navigation-bar .navbar li {
    display: inline;
} */

.navigation-bar .navbar li {
    float: left;
}

.navigation-bar main {
    margin-right: 20px;
    margin-left: 20px;
}



/* WEBSITE LAYOUT */
/* "*" this statement applies box-sizing all applicable boxes (here, it applies to aside, section, article) */
.website-layout * {
    /* keeps the boxes side by side, by calculating the padding */
    box-sizing: border-box;
}

.website-layout header {
    background-color: rgb(180, 180, 180);
    text-align: center;
    padding: 25px;
}

.website-layout .navbar {
    background-color: rgb(119, 119, 119);
    height: 50px;
}

/* actually I can combine the aside, section and article in a div, then I can use these as an inline block. instead of using float (as a "left") */
.website-layout aside {
    width: 20%;
    float: left;
    padding: 10px;

}

.website-layout section {
    width: 40%;
    float: left;
    padding: 10px;

}

.website-layout article {
    width: 40%;
    float: left;
    padding: 10px;

}

.website-layout footer {
    display: block;
    clear: both;    /* it seperates footer from the main */
    background-color: rgb(180, 180, 180);
    text-align: center;
    padding: 25px;
}

/* adjust the view under 600 pixels */
@media screen and (max-width:600px) {
    .website-layout aside {
        width: 100%;
    }
    .website-layout article {
        width: 100%;
    }
    .website-layout section {
        width: 100%;
    }
}


/* ICONS */
.icons {
    text-align: center;
}

.icons a {
    text-decoration: none;
    padding: 10px;
}

.icons .fa-solid.fa-house {
    color: hsl(0, 0%, 43%);
}
.icons .fa-solid.fa-house:hover {
    color: hsl(0, 0%, 65%);
}

.icons .fa-brands.fa-x-twitter.fa-2x {
    color: hsl(0, 0%, 15%);
}
.icons .fa-brands.fa-x-twitter.fa-2x:hover {
    color: hsl(0, 0%, 40%);
}

.icons .fa-brands.fa-youtube {
    color: hsl(0, 100%, 45%);
}
.icons .fa-brands.fa-youtube:hover {
    color: hsla(0, 100%, 50%, 0.877);
}

.icons .fa-brands.fa-instagram {
    color: hsl(15, 100%, 52%);
}
.icons .fa-brands.fa-instagram:hover {
    color: hsla(15, 100%, 52%, 0.559);
}



/* FLEXBOX */
.flexbox {
    border: 5px solid black;
    height: 90vh;

    display: flex;
    flex-direction: row;    /* default flex direction is "row" */
    
    /* justify content contols on "main axis". It depends on flex-direction */
    justify-content: space-between;

    /* align items controls on "cross axis" */
    align-items: flex-end;

    /* row-gap: 2em;
    column-gap: 2em; */

    /* if the boxes does not fit into a div, "wrap" lets pass a new line */
    flex-wrap: wrap;

    /* align content is more dominant than align items and align self */
    /* align-content: flex-end; */
}

.flexbox .box {
    width: 150px;
    height: 150px;
    border-radius: 15px;
    font-size: 6em;
    text-align: center;
}

.flexbox #box1 {
    background-color: hsl(0, 100%, 68%);
}

.flexbox #box2 {
    background-color: hsl(158, 52%, 49%);
    align-self: flex-start;
}

.flexbox #box3 {
    background-color: hsl(296, 52%, 49%);

    /* "-1" represents beginning, "1" represents end */
    /* order: -1; */
}

.flexbox #box4 {
    background-color: hsl(210, 100%, 69%);
}

.flexbox #box5 {
    background-color: hsl(70, 52%, 49%);
}

.flexbox #box6 {
    background-color: hsl(219, 52%, 49%);
}



/* TRANSFORMATION */
.transformation .box {
    width: 200px;
    height: 200px;
    border: 5px solid black;

    text-align: center;
    font-size: 5em;
    
    /* shift on the defined axis (x, y, z) until the specified pixels*/
    transform: translateX(200px);
    /* shift until the specified percentage of itself */
    transform: translateX(80%);
    /* both of them x and y axis */
    transform: translate(200px, 50px);


    /* rotates around the specified axis the desired degree */
    transform: rotateX(90deg);
    transform: rotateZ(180deg);

    /* scales on the specified axis */
    transform: scaleY(0.5);
    transform: scale(1, 1.1);

    /* skews on the specified axis */
    transform: skewX(45deg);
    transform: skewY(135deg);


    transform: translate(100%, 10px) rotateZ(45deg) scale(0.9);
}

.transformation #box1 {
    background-color: hsl(0, 100%, 69%);
}
.transformation #box2 {
    background-color: hsl(115, 100%, 69%);
}
.transformation #box3 {
    background-color: hsl(275, 100%, 69%);
}


/* ANIMATION */
.animation .box {
    border: 5px solid black;    
    background-color: hsl(180, 100%, 68%);
    width: 150px;
    height: 150px;
    padding: 5px;
    text-align: center;
    font-size: 3em;
    font-weight: bold;

    align-content: center;

    animation-name: slideLeft;
    animation-duration: 5s;

    animation-iteration-count: infinite;
    animation-direction: normal;
    animation-play-state: running;
    animation-timing-function: steps(20);
    animation-timing-function: ease-in-out;
    animation-timing-function: cubic-bezier(0.71,-0.77, 0.66, 1.85);
}

@keyframes slideLeft {
    from{transform:  translateX(300%);}
}

@keyframes slideRight {
    to{transform:  translateX(300%);}
}

@keyframes slideUp {
    from{transform: translateY(250%);}
}

@keyframes slideDown {
    to{transform: translateY(250%);}
}

@keyframes rotateZ {
    /* 50% statement provides handle rotate process in % 50 of time. It returns starting position in remaining time*/
    50%{transform: rotateZ(360deg);}
}

@keyframes rotateX {
    100%{transform: rotateX(360deg);}
}

@keyframes grow {
    50%{transform: scale(1, 2);}
}

@keyframes shrink {
    100%{transform: scale(0.5, 0.5);}
}

@keyframes fade {
    100%{opacity: 0;}
}

@keyframes colorChange {
    20%{background-color: hsl(158, 52%, 49%);}
    40%{background-color: hsl(108, 52%, 49%);}
    60%{background-color: hsl(59, 52%, 49%);}
    80%{background-color: hsl(19, 52%, 49%);}
    100%{background-color: hsl(0, 52%, 49%);}
}

@keyframes glow {
    50%{box-shadow: 2px 2px 100px black;}
}

/* PAGINATION */
.pagination .pages {
    text-align: center;
}

.pagination .pages a {
    text-decoration: none;
    color: black;
    padding: 10px 15px;
    display: inline-block;
}

.pagination .pages a.active {
    background-color: hsl(158, 52%, 49%);
    font-weight: bold;
    border-radius: 5px;
}

.pagination .pages a:hover:not(.active) {
    background-color: hsl(0, 0%, 74%);
    border-radius: 5px;
}



/* The last part */
input[type=text], input[type=password] {
    width: 100%;
    padding: 7px;
    border: 2px solid green;
    background-color: #3CBC8D;
    color: aliceblue;
    border-radius: 10px;
}

input[type=text]:focus, input[type=password]:focus {
    background-color: lightblue;
}


table {
    border-collapse: collapse;
    width: 100%;

}